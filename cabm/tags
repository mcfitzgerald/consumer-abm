!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/michael/Documents/GitHub/consumer-abm/cabm/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210411.0/
Configuration	cabm_helpers/config_helpers.py	/^class Configuration:$/;"	c
ConsumerAgent	cabm_agent.py	/^class ConsumerAgent(mesa.Agent):$/;"	c
ConsumerModel	cabm_agent.py	/^class ConsumerModel(mesa.Model):$/;"	c
__init__	cabm_agent.py	/^    def __init__(self, N, config_file, enable_ads=True):$/;"	m	class:ConsumerModel
__init__	cabm_agent.py	/^    def __init__(self, unique_id, model, config):$/;"	m	class:ConsumerAgent
__init__	cabm_helpers/config_helpers.py	/^    def __init__(self, config: Dict):$/;"	m	class:Configuration
ad_decay	cabm_helpers/ad_helpers.py	/^def ad_decay(adstock: Dict, factor: float) -> Dict:$/;"	f	typeref:typename:Dict
ad_exposure	cabm_agent.py	/^    def ad_exposure(self):$/;"	m	class:ConsumerAgent
assign_weights	cabm_helpers/ad_helpers.py	/^def assign_weights(items: List[str], prior_weights: List[float]) -> Dict:$/;"	f	typeref:typename:Dict
calculate_adstock	cabm_helpers/ad_helpers.py	/^def calculate_adstock($/;"	f	typeref:typename:Dict
compute_average_price	cabm_helpers/agent_and_model_functions.py	/^def compute_average_price(model):$/;"	f
compute_total_purchases	cabm_helpers/agent_and_model_functions.py	/^def compute_total_purchases(model):$/;"	f
consume	cabm_agent.py	/^    def consume(self):$/;"	m	class:ConsumerAgent
file_handler	cabm_agent.py	/^file_handler = logging.FileHandler("cabm.log")$/;"	v
generate_brand_ad_channel_map	cabm_helpers/config_helpers.py	/^def generate_brand_ad_channel_map(brand_list: List[str], config: Dict) -> Dict:$/;"	f	typeref:typename:Dict
generate_brand_ad_schedule	cabm_helpers/ad_calendar.py	/^def generate_brand_ad_schedule($/;"	f	typeref:typename:pd.DataFrame
generate_brand_promo_schedule	cabm_helpers/promo_calendar.py	/^def generate_brand_promo_schedule($/;"	f	typeref:typename:pd.DataFrame
generate_joint_ad_promo_schedule	cabm_helpers/config_helpers.py	/^def generate_joint_ad_promo_schedule(brands: List[str], config: Dict) -> pd.DataFrame:$/;"	f	typeref:typename:pd.DataFrame
get_current_price	cabm_helpers/agent_and_model_functions.py	/^def get_current_price(week, joint_calendar, brand):$/;"	f
get_pantry_max	cabm_helpers/agent_and_model_functions.py	/^def get_pantry_max(household_size, pantry_min):$/;"	f
get_purchase_probabilities	cabm_helpers/ad_helpers.py	/^def get_purchase_probabilities($/;"	f	typeref:typename:Dict
initialize_ad_preferences	cabm_agent.py	/^    def initialize_ad_preferences(self):$/;"	m	class:ConsumerAgent
initialize_brand_preference	cabm_agent.py	/^    def initialize_brand_preference(self):$/;"	m	class:ConsumerAgent
initialize_household	cabm_agent.py	/^    def initialize_household(self):$/;"	m	class:ConsumerAgent
initialize_pantry	cabm_agent.py	/^    def initialize_pantry(self):$/;"	m	class:ConsumerAgent
initialize_prices	cabm_agent.py	/^    def initialize_prices(self):$/;"	m	class:ConsumerAgent
logger	cabm_agent.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cabm_helpers/ad_helpers.py	/^logger = logging.getLogger(__name__)$/;"	v
model	run_sim.py	/^    model = ConsumerModel(N, config_file, enable_ads=True)$/;"	v
np	cabm_agent.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	cabm_helpers/ad_calendar.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	cabm_helpers/ad_helpers.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	cabm_helpers/agent_and_model_functions.py	/^import numpy as np$/;"	I	nameref:module:numpy
pd	cabm_helpers/ad_calendar.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	cabm_helpers/ad_helpers.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	cabm_helpers/config_helpers.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	cabm_helpers/promo_calendar.py	/^import pandas as pd$/;"	I	nameref:module:pandas
prepare_ad_schedule_variables	cabm_helpers/ad_calendar.py	/^def prepare_ad_schedule_variables(brand: str, config: Dict) -> tuple:$/;"	f	typeref:typename:tuple
prepare_promo_schedule_variables	cabm_helpers/promo_calendar.py	/^def prepare_promo_schedule_variables(brand: str, config: Dict) -> tuple:$/;"	f	typeref:typename:tuple
purchase	cabm_agent.py	/^    def purchase(self):$/;"	m	class:ConsumerAgent
sample_beta_min	cabm_helpers/agent_and_model_functions.py	/^def sample_beta_min(alpha, beta, min_value=0.05, override=None):$/;"	f
sample_normal_min	cabm_helpers/agent_and_model_functions.py	/^def sample_normal_min(mean, std_dev=1.0, min_value=1.0, override=None):$/;"	f
set_purchase_behavior	cabm_agent.py	/^    def set_purchase_behavior(self):$/;"	m	class:ConsumerAgent
step	cabm_agent.py	/^    def step(self):$/;"	m	class:ConsumerAgent
step	cabm_agent.py	/^    def step(self):$/;"	m	class:ConsumerModel
update_adstock	cabm_helpers/ad_helpers.py	/^def update_adstock(adstock1: Dict, adstock2: Dict) -> Dict:$/;"	f	typeref:typename:Dict
